import sys
import os
import numpy as np
from googletrans import Translator
import tensorflow as tf
from PyQt5.QtWidgets import (
    QApplication, QWidget, QLabel, QPushButton, QTextEdit,
    QVBoxLayout, QHBoxLayout, QFileDialog, QMessageBox
)
from PyQt5.QtGui import QPixmap
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image

# ==== 1. C·∫•u h√¨nh ban ƒë·∫ßu ====
# C·ªë ƒë·ªãnh seed ƒë·ªÉ k·∫øt qu·∫£ d·ª± ƒëo√°n kh√¥ng thay ƒë·ªïi m·ªói l·∫ßn
os.environ['PYTHONHASHSEED'] = '0'
np.random.seed(42)
tf.random.set_seed(42)

MODEL_PATH = "cnn_model_final.h5"
IMG_SIZE = (192, 192)
DATASET_PATH = "Dataset/train"

# ==== 2. T·∫£i danh s√°ch l·ªõp ====
if not os.path.exists(DATASET_PATH):
    raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c dataset: {DATASET_PATH}")
class_names = sorted(os.listdir(DATASET_PATH))

# ==== 3. Load model ====
try:
    model = load_model(MODEL_PATH)
except Exception as e:
    raise RuntimeError(f"L·ªói khi t·∫£i model {MODEL_PATH}: {e}")

# ==== 4.5. B·∫£n ƒë·ªì nh√£n ti·∫øng Anh -> ti·∫øng Vi·ªát ====
label_map = {
    "Acne and Rosacea Photos": "M·ª•n tr·ª©ng c√° v√† ch·ª©ng ƒë·ªè m·∫∑t (Rosacea)",
    "Actinic Keratosis Basal Cell Carcinoma and other Malignant Lesions": "T·ªïn th∆∞∆°ng √°c t√≠nh v√† ti·ªÅn ung th∆∞ da",
    "Atopic Dermatitis Photos": "Vi√™m da c∆° ƒë·ªãa",
    "Cellulitis Impetigo and other Bacterial Infections": "Nhi·ªÖm tr√πng da do vi khu·∫©n (Ch·ªëc l·ªü, vi√™m m√¥ t·∫ø b√†o...)",
    "Eczema Photos": "B·ªánh ch√†m (Eczema)",
    "Exanthems and Drug Eruptions": "Ph√°t ban v√† d·ªã ·ª©ng do thu·ªëc",
    "Herpes HPV and other STDs Photos": "B·ªánh l√¢y truy·ªÅn qua ƒë∆∞·ªùng t√¨nh d·ª•c (Herpes, HPV...)",
    "Light Diseases and Disorders of Pigmentation": "R·ªëi lo·∫°n s·∫Øc t·ªë v√† b·ªánh do √°nh s√°ng",
    "Lupus and other Connective Tissue diseases": "Lupus v√† b·ªánh m√¥ li√™n k·∫øt",
    "Melanoma Skin Cancer Nevi and Moles": "Ung th∆∞ h·∫Øc t·ªë, n·ªët ru·ªìi v√† b·ªõt da",
    "Poison Ivy Photos and other Contact Dermatitis": "Vi√™m da ti·∫øp x√∫c (Poison Ivy, d·ªã ·ª©ng...)",
    "Psoriasis pictures Lichen Planus and related diseases": "V·∫£y n·∫øn v√† c√°c b·ªánh da t∆∞∆°ng t·ª± (Lichen Planus...)",
    "Seborrheic Keratoses and other Benign Tumors": "U l√†nh t√≠nh v√† d√†y s·ª´ng ti·∫øt b√£",
    "Systemic Disease": "Bi·ªÉu hi·ªán da c·ªßa b·ªánh h·ªá th·ªëng",
    "Tinea Ringworm Candidiasis and other Fungal Infections": "Nhi·ªÖm n·∫•m da (H·∫Øc l√†o, Candida...)",
    "Urticaria Hives": "M·ªÅ ƒëay (Urticaria)",
    "Vascular Tumors": "U m·∫°ch m√°u",
    "Vasculitis Photos": "Vi√™m m·∫°ch m√°u",
    "Warts Molluscum and other Viral Infections": "M·ª•n c√≥c, Molluscum v√† nhi·ªÖm virus kh√°c"
}

# ==== 4. H√†m d·ª± ƒëo√°n ====
def predict_image(img_path):
    """D·ª± ƒëo√°n 1 ·∫£nh, tr·∫£ v·ªÅ class v√† confidence"""
    try:
        img = image.load_img(img_path, target_size=IMG_SIZE)
        img_array = image.img_to_array(img)
        img_array = np.expand_dims(img_array, axis=0)
        preds = model.predict(img_array)
        pred_index = np.argmax(preds[0])
        pred_class = class_names[pred_index]
        confidence = preds[0][pred_index] * 100
        return pred_class, confidence
    except Exception as e:
        raise RuntimeError(f"L·ªói khi d·ª± ƒëo√°n ·∫£nh: {e}")

# ==== 5. Giao di·ªán ng∆∞·ªùi d√πng ====
class SkinDiagnosisApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("ü©∫ AI Ch·∫©n ƒëo√°n b·ªánh da")
        self.setGeometry(200, 200, 700, 500)

        # Label hi·ªÉn th·ªã ·∫£nh
        self.image_label = QLabel("Ch∆∞a c√≥ ·∫£nh")
        self.image_label.setFixedSize(300, 300)
        self.image_label.setStyleSheet("border: 1px solid gray; text-align: center;")

        # N√∫t ch·ªçn ·∫£nh
        self.btn_load = QPushButton("üìÇ Ch·ªçn ·∫£nh")
        self.btn_load.clicked.connect(self.load_image)

        # Textbox nh·∫≠p m√¥ t·∫£ tri·ªáu ch·ª©ng
        self.desc_input = QTextEdit()
        self.desc_input.setPlaceholderText("Nh·∫≠p m√¥ t·∫£ tri·ªáu ch·ª©ng (v√≠ d·ª•: ng·ª©a, n·ªïi m·∫©n, kh√¥ da...)")

        # N√∫t d·ª± ƒëo√°n
        self.btn_predict = QPushButton("ü§ñ D·ª± ƒëo√°n")
        self.btn_predict.clicked.connect(self.make_prediction)

        # Label hi·ªÉn th·ªã k·∫øt qu·∫£
        self.result_label = QLabel("K·∫øt qu·∫£ d·ª± ƒëo√°n s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y")
        self.result_label.setWordWrap(True)
        self.result_label.setStyleSheet("font-weight: bold; color: #333;")

        # Layout ch√≠nh
        h_layout = QHBoxLayout()
        v_left = QVBoxLayout()
        v_left.addWidget(self.image_label)
        v_left.addWidget(self.btn_load)

        v_right = QVBoxLayout()
        v_right.addWidget(QLabel("üßæ M√¥ t·∫£ tri·ªáu ch·ª©ng:"))
        v_right.addWidget(self.desc_input)
        v_right.addWidget(self.btn_predict)
        v_right.addWidget(self.result_label)

        h_layout.addLayout(v_left)
        h_layout.addLayout(v_right)
        self.setLayout(h_layout)

        self.img_path = None

    def load_image(self):
        file_dialog = QFileDialog()
        fname, _ = file_dialog.getOpenFileName(self, "Ch·ªçn ·∫£nh", "", "Images (*.png *.jpg *.jpeg)")
        if fname:
            self.img_path = fname
            pixmap = QPixmap(fname).scaled(self.image_label.width(), self.image_label.height())
            self.image_label.setPixmap(pixmap)

    def make_prediction(self):
        if not self.img_path:
            QMessageBox.warning(self, "L·ªói", "B·∫°n ch∆∞a ch·ªçn ·∫£nh!")
            return
        try:
            pred_class, confidence = predict_image(self.img_path)
            pred_class_vi = label_map.get(pred_class, pred_class)  # L·∫•y t√™n ti·∫øng Vi·ªát
            desc = self.desc_input.toPlainText().strip()
            advice = self.generate_advice(pred_class_vi, desc)
            #th√™m ti·∫øng vi·ªát
            pred_class_vi = label_map.get(pred_class, pred_class)
            self.result_label.setText(
                f"üß† D·ª± ƒëo√°n: <b>{pred_class_vi}</b> ({confidence:.2f}%)\nüí° L·ªùi khuy√™n: {advice}"
            )
        except Exception as e:
            QMessageBox.critical(self, "L·ªói", str(e))

    def generate_advice(self, pred_class_vi, desc):
        advice = f"N·∫øu t√¨nh tr·∫°ng {pred_class_vi.lower()} k√©o d√†i, b·∫°n n√™n g·∫∑p b√°c sƒ© da li·ªÖu."
        if "ng·ª©a" in desc.lower():
            advice += " C√≥ th·ªÉ d√πng thu·ªëc b√¥i ch·ªëng ng·ª©a ho·∫∑c gi·ªØ da kh√¥ tho√°ng."
        if "m·ª•n" in desc.lower():
            advice += " N√™n gi·ªØ da s·∫°ch, tr√°nh s·ªù tay l√™n v√πng b·ªã m·ª•n."
        if "ƒë·ªè" in desc.lower():
            advice += " H·∫°n ch·∫ø ti·∫øp x√∫c √°nh n·∫Øng v√† tr√°nh s·∫£n ph·∫©m g√¢y k√≠ch ·ª©ng."
        return advice

# ==== 6. Ch·∫°y ·ª©ng d·ª•ng ====
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = SkinDiagnosisApp()
    window.show()
    sys.exit(app.exec_())
