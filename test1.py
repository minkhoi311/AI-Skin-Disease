import sys
import os
import numpy as np
from googletrans import Translator
import pandas as pd
import tensorflow as tf
import re
from PyQt5.QtWidgets import (
    QApplication, QWidget, QLabel, QPushButton, QTextEdit,
    QVBoxLayout, QHBoxLayout, QFileDialog, QMessageBox
)
from PyQt5.QtGui import QPixmap
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# ===== C·∫•u h√¨nh =====
os.environ['PYTHONHASHSEED'] = '0'
np.random.seed(42)
tf.random.set_seed(42)

MODEL_PATH = "cnn_model_final.h5"
IMG_SIZE = (192, 192)
DATASET_PATH = "Dataset/train"
SYMPTOM_FILE = "skin_diseases.xlsx"
ALPHA = 0.7  # ·∫¢nh chi·∫øm 70%, text chi·∫øm 30%

# ===== Load l·ªõp =====
if not os.path.exists(DATASET_PATH):
    raise FileNotFoundError(f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c dataset: {DATASET_PATH}")
class_names = sorted(os.listdir(DATASET_PATH))

# ===== Load model CNN =====
model = load_model(MODEL_PATH)


# H√†m d·ªãch t·ª± ƒë·ªông
def auto_translate_labels(class_list):
    translator = Translator()
    label_map = {}
    for name in class_list:
        vi_name = translator.translate(name, src='en', dest='vi').text
        label_map[name] = vi_name
    return label_map

# D·ªãch sang ti·∫øng Vi·ªát
label_map = auto_translate_labels(class_names)

# ===== Load tri·ªáu ch·ª©ng =====
df_symptoms = pd.read_excel(SYMPTOM_FILE)
if 'Disease' not in df_symptoms.columns or 'Symptom' not in df_symptoms.columns:
    raise ValueError("File tri·ªáu ch·ª©ng c·∫ßn c√≥ c·ªôt 'Disease' v√† 'Symptom'.")

vectorizer = TfidfVectorizer()
tfidf_matrix = vectorizer.fit_transform(df_symptoms['Symptom'])


# ==== H√†m ti·ªÅn x·ª≠ l√Ω text ====
def preprocess_text(text):
    """Chu·∫©n h√≥a, m·ªü r·ªông √Ω nghƒ©a t·ª´ m√¥ t·∫£ c·ªßa ng∆∞·ªùi d√πng."""
    text = text.lower()
    text = re.sub(r'[^a-zA-Z√Ä-·ªπ\s]', '', text)
    # m·ªü r·ªông m·ªôt s·ªë t·ª´ kh√≥a ph·ªï bi·∫øn
    text = text.replace("m·ª•n", "m·ª•n tr·ª©ng c√° ƒë·ªè m·ª•n nh·ªè tr√™n m·∫∑t")
    text = text.replace("ng·ª©a", "ng·ª©a kh√¥ r√°t kh√≥ ch·ªãu")
    text = text.replace("r√°t", "r√°t ƒë·ªè s∆∞ng")
    text = text.replace("bong", "bong tr√≥c tr√≥c v·∫£y")
    text = text.replace("v·∫£y", "v·∫£y tr·∫Øng da kh√¥")
    return text.strip()


# ==== D·ª± ƒëo√°n ·∫£nh ====
def predict_image(img_path):
    img = image.load_img(img_path, target_size=IMG_SIZE)
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    preds = model.predict(img_array)
    return preds[0]


# ==== D·ª± ƒëo√°n tri·ªáu ch·ª©ng ====
def predict_from_text(patient_desc):
    if not patient_desc.strip():
        return np.zeros(len(class_names))

    desc = preprocess_text(patient_desc)
    vec = vectorizer.transform([desc])
    sims = cosine_similarity(vec, tfidf_matrix)[0]

    text_scores = np.zeros(len(class_names))
    for i, disease in enumerate(class_names):
        # kh·ªõp g·∫ßn ƒë√∫ng
        matches = [
            j for j, d in enumerate(df_symptoms['Disease'])
            if d.lower() in disease.lower() or disease.lower() in d.lower()
        ]
        if matches:
            text_scores[i] = np.max(sims[matches])
        else:
            text_scores[i] = 0
    return text_scores


# ===== Giao di·ªán GUI =====
class SkinDiagnosisApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("ü©∫ AI Ch·∫©n ƒëo√°n b·ªánh da")
        self.setGeometry(200, 200, 900, 520)

        self.image_label = QLabel("Ch∆∞a c√≥ ·∫£nh")
        self.image_label.setFixedSize(224, 224)
        self.image_label.setStyleSheet("border: 1px solid gray;")

        self.btn_load = QPushButton("üìÇ Ch·ªçn ·∫£nh")
        self.btn_load.clicked.connect(self.load_image)

        self.desc_input = QTextEdit()
        self.desc_input.setPlaceholderText("Nh·∫≠p m√¥ t·∫£ tri·ªáu ch·ª©ng (v√≠ d·ª•: ng·ª©a, n·ªïi m·ª•n, kh√¥ da...)")
        self.desc_input.setFixedHeight(200)

        self.btn_predict = QPushButton("ü§ñ D·ª± ƒëo√°n")
        self.btn_predict.clicked.connect(self.make_prediction)

        self.result_label = QLabel("K·∫øt qu·∫£ d·ª± ƒëo√°n s·∫Ω hi·ªÉn th·ªã ·ªü ƒë√¢y")
        self.result_label.setWordWrap(True)
        self.result_label.setStyleSheet("font-weight: bold; color: #333;")

        v_left = QVBoxLayout()
        v_left.addWidget(self.image_label)
        v_left.addWidget(self.btn_load)

        v_right = QVBoxLayout()
        v_right.addWidget(QLabel("üßæ M√¥ t·∫£ tri·ªáu ch·ª©ng:"))
        v_right.addWidget(self.desc_input)
        v_right.addWidget(self.btn_predict)
        v_right.addWidget(self.result_label)

        h_layout = QHBoxLayout()
        h_layout.addLayout(v_left)
        h_layout.addLayout(v_right)
        self.setLayout(h_layout)

        self.img_path = None

    def load_image(self):
        fname, _ = QFileDialog.getOpenFileName(self, "Ch·ªçn ·∫£nh", "", "Images (*.png *.jpg *.jpeg)")
        if fname:
            self.img_path = fname
            pixmap = QPixmap(fname).scaled(self.image_label.width(), self.image_label.height())
            self.image_label.setPixmap(pixmap)

    def make_prediction(self):
        if not self.img_path:
            QMessageBox.warning(self, "L·ªói", "B·∫°n ch∆∞a ch·ªçn ·∫£nh!")
            return
        try:
            img_probs = predict_image(self.img_path)
            desc = self.desc_input.toPlainText().strip()
            text_scores = predict_from_text(desc)

            final_scores = ALPHA * img_probs + (1 - ALPHA) * text_scores
            final_index = np.argmax(final_scores)
            final_class = class_names[final_index]
            final_class_vi = label_map.get(final_class, final_class)

            advice = self.generate_advice(final_class_vi, desc)
            self.result_label.setText(
                f"üß† <b>K·∫øt qu·∫£:</b> {final_class_vi}\nüí° {advice}"
            )

        except Exception as e:
            QMessageBox.critical(self, "L·ªói", str(e))

    def generate_advice(self, pred_class_vi, desc):
        advice = f"N·∫øu t√¨nh tr·∫°ng {pred_class_vi.lower()} k√©o d√†i, b·∫°n n√™n g·∫∑p b√°c sƒ© da li·ªÖu."
        if desc:
            desc_lower = desc.lower()
            if "ng·ª©a" in desc_lower:
                advice += " C√≥ th·ªÉ d√πng thu·ªëc b√¥i ch·ªëng ng·ª©a ho·∫∑c gi·ªØ da kh√¥ tho√°ng."
            if "m·ª•n" in desc_lower:
                advice += " N√™n gi·ªØ da s·∫°ch, tr√°nh s·ªù tay l√™n v√πng b·ªã m·ª•n."
            if "ƒë·ªè" in desc_lower:
                advice += " H·∫°n ch·∫ø ti·∫øp x√∫c √°nh n·∫Øng v√† tr√°nh s·∫£n ph·∫©m g√¢y k√≠ch ·ª©ng."
            if "tr√≥c" in desc_lower or "bong" in desc_lower:
                advice += " N√™n d∆∞·ª°ng ·∫©m th∆∞·ªùng xuy√™n ƒë·ªÉ tr√°nh kh√¥ da."
        return advice


# ===== Run App =====
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = SkinDiagnosisApp()
    window.show()
    sys.exit(app.exec_())
